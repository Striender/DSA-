#include <bits/stdc++.h>

using namespace std;

bool isSafe(vector<vector<int>> &m, int n , vector<vector<int>> visited , int x , int y){
        
        if((x >= 0 && x < n) && (y >=0 && y < n) && (m[x][y] == 1) && (visited[x][y] == 0)){
            return true ;
        }
        else{
            return false ;
        }
    }
    
void solve(vector<vector<int>> &m, int n , vector<string>& ans , vector<vector<int>> visited , string path , int x ,int y){
    
    if(x == n-1 && y == n-1){
            ans.push_back(path);
            return ;
        }
        
        visited[x][y] = 1 ;
        
        // down 
        
        int mo_x = x+1 ;
        int mo_y = y ;
        
        if(isSafe(m , n , visited , mo_x , mo_y)){
        
            path += 'D';
            solve(m ,n , ans , visited , path , mo_x , mo_y );
            path.pop_back();
        }
        
        // UP
        mo_x = x-1 ;
        mo_y = y ;
        
        if(isSafe(m , n , visited , mo_x , mo_y)){

            path += 'U';
            solve(m ,n , ans , visited , path , mo_x , mo_y );
            path.pop_back();
        }
        
        //right
        
        mo_x = x ;
        mo_y = y+1 ;
        
        if(isSafe(m , n , visited , mo_x , mo_y)){
            
            path += 'R' ;
            solve(m ,n , ans , visited , path , mo_x , mo_y );
            path.pop_back();
        }
        // left
        mo_x = x ;
        mo_y = y-1 ;
        
        if(isSafe(m , n , visited , mo_x , mo_y)){
            path += 'L' ;
            solve(m ,n , ans , visited , path , mo_x , mo_y );
            path.pop_back();
        }
        
        visited[x][y] = 0 ;
}

 vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans ;
        vector<vector<int>> visited = m;
        
        if(m[0][0] == 0){
            return ans ;
        }
        
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<n ; j++){
                visited[i][j] = 0;
            }
        }
        
        int src_x = 0 ;
        int scr_y = 0 ;
        
        string path ="";
        
        solve(m , n , ans , visited ,path, src_x , scr_y);
        sort(ans.begin() , ans.end());
        return ans ; 
        
    }
int main()
{
    int n ;
    cin >> n ;
    
    vector<vector<int>> nums(n , vector<int>(n, 0)) ;
    
    for(int i=0 ; i<n ;i++){
        for(int j= 0; j<n ;j++){
            cin >> nums[i][j] ;
        }
    }
    
    vector<string> s = findPath(nums , n);
    for(auto it : s){
        cout << it << " " ;
    }

    return 0;
}
